structure A = Absyn
structure S = Symbol

(* [these functions and similar ones may be convenient
 * for the creation of abstract syntax trees] *)

datatype lvalueSpec = Field of S.symbol
		| Subscript of A.exp

fun makeInt(e)=A.IntExp e

fun makeCallExp( f , arglist, p) =
 A.CallExp { func = S.symbol f,
	      args = arglist,
	      pos = p}

(* Construct the lvalue one list element at the time*)
fun makeLvalue (v, p, (value,pos)::l) = (case value of
					   Field(s) => makeLvalue(A.FieldVar(v, s , pos), pos, l)
						  | Subscript(exp) => makeLvalue(A.SubscriptVar(v,exp,pos), pos, l)
)
				       |  makeLvalue (v,_,[]) = v

(* check if we have var expression, extract the
underlying variable *)
fun getLvalue ( var : A.exp) : A.var =
  (case var of A.VarExp(v) => v
	    | _  => A.SimpleVar(S.symbol "bogusVar", 0))

fun makeBinop (e1, bop, e2, p) =
    A.OpExp  { left = e1
             , oper = bop
             , right = e2
             , pos = p}

fun makeIf (et, en, el, p) =
    A.IfExp  { test = et
             , thn = en
             , els = el
             , pos = p}

fun makeVarDec (idsym, ty, e, p) =
    A.VarDec { name = idsym
             , escape = ref true
             , typ = ty
             , init = e
             , pos = p}

fun makeAssign (v, e, p) =
  A.AssignExp { var = v
	      , exp = e
	      , pos = p }

fun makeWhile (t, e, p) =
  A.WhileExp { test = t
	   , body = e
	   , pos = p }

fun makeFor (i, low, high, e, p) =
  let val s = (S.symbol i) in
  A.ForExp { var = s
	   , escape = ref true
	   , lo = low
	   , hi = high
	   , body = e
	   , pos = p }
  end

fun makeFundecl (idsym, ps, rty, e, p) =
             { name = idsym
             , params = ps
             , result = rty
             , body = e
             , pos = p} : A.fundecldata


fun makeArrCreate (ty, s, i, p) =
  A.ArrayExp{typ = S.symbol ty
            , size = s
            , init = i
            , pos = p }

fun makeRecCreate(i, fi, p) =
  A.RecordExp{fields = fi
            , typ = S.symbol i
            , pos = p }

fun makeTyDec(n, t, p) =
  {name = S.symbol n
              , ty = t
              , pos = p } : A.tydecldata

fun makeFieldTy(id1,id2,pos2,pos1) =
  {
    name = S.symbol id1,
    escape = ref true,
    typ = ((S.symbol id2), pos2),
    pos = pos1} : A.fielddata

    (*MakeLetExp*)
fun makeLetExp (decl, bod, p) =
          A.LetExp{ decls = decl
                , body = bod
                , pos = p
                }
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | CARET
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

(* [add missing nonterminals; in second phase: add semantic values] *)

%nonterm program of A.exp | exp of A.exp
  | dec of A.decl | deccon of A.decl list
  | tydec of A.tydecldata | vardec of A.decl | fundec of A.fundecldata
  | fielddec of A.fielddata | fielddeccontent of A.fielddata list
  | ty of A.ty | typeid of A.exp | tyfields of A.exp
  | arrty of A.ty | recty of A.ty
  (* Here we define certain non terminals to stand for expressions *)
  | lvalue of A.exp
  | subscript of (lvalueSpec * int)
  | fieldexp of (lvalueSpec * int)
  | ltail of (lvalueSpec * int) list
  | callexp of A.exp | callexpcon of (A.exp * A.pos) list
  | arrcreate of A.exp
  | reccreate of A.exp | reccreatecon of (S.symbol * A.exp * pos) list
  | fieldcreate of (S.symbol * A.exp * pos)
  | assignment of A.exp
  | seqexp of A.exp | seqsexps of (A.exp * pos) list
  | letexp of A.exp
  | binop of A.exp | unaryop of A.exp
  | ifexp of A.exp | ifelseexp of A.exp
  | whileexp of A.exp
  | forexp of A.exp
  | fundeclbegin of A.decl list | tydeclbegin of A.decl list
  | vardeclbegin of A.decl list
  | fundeclist of A.fundecldata list | tydeclist of A.tydecldata list
  | vardeclist of A.vardecldata


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION
         VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* [specify precedence/associativity, least tight binding first] *)

(* Here we will esablish precedence for standard operators including +,-,/,*,^ *)
%nonassoc FUNCTION VAR TYPE THEN DO OF ASSIGN
%right ELSE
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%right CARET

(* [..more tokens & levels..] *)

%%

(* Top level constructs *)

program: exp                  (exp)

exp: INT       ( A.IntExp INT)
   | STRING ( A.StringExp(STRING , STRING1left) )
  | NIL ( A.NilExp )
  | BREAK (A.BreakExp BREAK1left)
  | seqexp ( seqexp )
  | unaryop  (unaryop)
  | binop  (binop)
  | callexp (callexp)
  | assignment ( assignment )
  | lvalue (lvalue)
  | forexp ( forexp )
  | whileexp ( whileexp )
  | ifexp ( ifexp )
  | ifelseexp ( ifelseexp )
  | arrcreate ( arrcreate )
  | reccreate ( reccreate )
  | letexp ( letexp )

(* Here we create the arithmetic operators *)
binop : exp PLUS exp 	%prec PLUS ( makeBinop (exp1,A.PlusOp,exp2, PLUSleft ))
	| exp MINUS exp 	%prec MINUS (makeBinop (exp1,A.MinusOp,exp2, MINUSleft ))
	| exp TIMES exp 	%prec TIMES ( makeBinop( exp1, A.TimesOp, exp2, TIMESleft ))
	| exp DIVIDE exp 	%prec DIVIDE ( makeBinop(exp1, A.DivideOp, exp2, DIVIDEleft ))
	| exp CARET exp 	%prec CARET ( makeBinop( exp1, A.ExponentOp, exp2, CARETleft ))
(* logical operators here *)
	| exp AND exp %prec AND ( makeIf(exp1,exp2,SOME (A.IntExp(0)), ANDleft))
	| exp OR exp %prec OR ( makeIf (exp1, A.IntExp(1), SOME exp2, ORleft))
	| exp EQ exp %prec EQ (makeBinop(exp1,A.EqOp,exp2,EQleft))
	| exp NEQ exp %prec NEQ ( makeBinop(exp1,A.NeqOp,exp2,NEQleft) )
	| exp LT exp %prec LT ( makeBinop(exp1,A.LtOp,exp2,LTleft) )
	| exp LE exp %prec LE ( makeBinop(exp1,A.LeOp,exp2,LEleft) )
	| exp GT exp %prec GT ( makeBinop(exp1,A.GtOp,exp2,GTleft) )
	| exp GE exp %prec GE ( makeBinop(exp1,A.GeOp,exp2,GEleft) )


unaryop : MINUS exp (makeBinop(A.IntExp(0), A.MinusOp, exp, MINUSleft))

seqexp : LPAREN seqsexps RPAREN ( A.SeqExp(seqsexps) )

seqsexps : exp ( [(exp, expleft)] )
        | exp SEMICOLON seqsexps ( (exp,expleft)::seqsexps )
        | ([])

(* Split callexp up in order to construct a list *)
callexp : ID LPAREN callexpcon RPAREN (makeCallExp(ID,callexpcon,IDleft))

callexpcon : exp ([(exp,expleft)])
			| exp COMMA callexpcon ((exp,expleft)::callexpcon)
			| ([])

assignment : lvalue ASSIGN exp ( makeAssign( getLvalue(lvalue) , exp, ASSIGNleft) )

forexp : FOR ID ASSIGN exp TO exp DO exp (makeFor(ID, exp1, exp2, exp3, FORleft))

whileexp : WHILE exp DO exp ( makeWhile( exp1, exp2, WHILEleft) )

ifexp : IF exp THEN exp ( makeIf(exp1, exp2, (NONE), IFleft) )

ifelseexp : IF exp THEN exp ELSE exp ( makeIf(exp1, exp2, (SOME exp3), IFleft)  )

tydec : TYPE ID	EQ ty (makeTyDec(ID,ty, TYPEleft))

ty : ID (A.NameTy((S.symbol ID),IDleft))
	| arrty (arrty)
	| recty (recty)

arrty : ARRAY OF ID (A.ArrayTy((S.symbol ID),ARRAYleft))

recty : LBRACE fielddeccontent RBRACE (A.RecordTy fielddeccontent)
  | LBRACE RBRACE (A.RecordTy [])

fielddeccontent : fielddec ([fielddec])
				| fielddec COMMA fielddeccontent (fielddec::fielddeccontent)


fielddec : ID COLON ID (makeFieldTy(ID1,ID2, ID2left,ID1left))

(* an lValue can be rather complicated in apperance. We know we are starting with an ID, then expand if so required *)
lvalue : ID ltail ( A.VarExp( makeLvalue(
			A.SimpleVar(S.symbol ID, IDleft), IDleft, ltail))
		  )
(* ltail construct a list we can use to determiny the variable type of an lvalue *)
ltail : subscript ltail (subscript::ltail)
      | fieldexp ltail (fieldexp::ltail)
      | ([])

subscript : LBRACK exp RBRACK ((Subscript(exp), LBRACKleft))

fieldexp : DOT ID ((Field(S.symbol ID), DOTleft))

arrcreate : ID LBRACK exp RBRACK OF exp (makeArrCreate(ID,exp1,exp2,IDleft))

reccreate : ID LBRACE reccreatecon RBRACE (makeRecCreate(ID,reccreatecon,IDleft))
      | ID LBRACE RBRACE (makeRecCreate(ID,[],IDleft))

reccreatecon : fieldcreate ([fieldcreate])
			| fieldcreate COMMA reccreatecon (fieldcreate:: reccreatecon)

fieldcreate : ID EQ exp ((S.symbol ID,exp,IDleft))

(*Let Exp*)
letexp : LET deccon IN seqsexps END ( makeLetExp(deccon, A.SeqExp seqsexps, decconleft) )

deccon : fundeclbegin (fundeclbegin)
        | vardeclbegin (vardeclbegin)
        | tydeclbegin (tydeclbegin)

fundeclbegin : fundeclist ([A.FunctionDec fundeclist])
           | fundeclist tydeclbegin ((A.FunctionDec fundeclist)::tydeclbegin)
           | fundeclist vardeclbegin ((A.FunctionDec fundeclist)::vardeclbegin)

vardeclbegin : vardec ([vardec])
           | vardec fundeclbegin (vardec::fundeclbegin)
           | vardec tydeclbegin (vardec::tydeclbegin)
           | vardec vardeclbegin(vardec::vardeclbegin)

tydeclbegin : tydeclist ([A.TypeDec tydeclist])
          | tydeclist vardeclbegin ((A.TypeDec tydeclist)::vardeclbegin )
          | tydeclist fundeclbegin ((A.TypeDec tydeclist)::fundeclbegin )

fundeclist : fundec ([fundec])
           | fundec fundeclist (fundec :: fundeclist)

tydeclist : tydec ([tydec])
          | tydec tydeclist (tydec :: tydeclist)

fundec : FUNCTION ID LPAREN fielddeccontent RPAREN EQ exp
            (makeFundecl(S.symbol ID, fielddeccontent, NONE, exp, ID1left))
        | FUNCTION ID LPAREN fielddeccontent RPAREN COLON ID EQ exp
          (makeFundecl(S.symbol ID1, fielddeccontent, SOME (S.symbol ID2,ID2left), exp, ID1left))
        | FUNCTION ID LPAREN RPAREN COLON ID EQ exp
          (makeFundecl(S.symbol ID1, nil, SOME (S.symbol ID2,ID2left), exp, ID1left))
	| FUNCTION ID LPAREN RPAREN EQ exp
            (makeFundecl(S.symbol ID, nil, NONE, exp, ID1left))


vardec : VAR ID ASSIGN exp (makeVarDec(S.symbol ID1, NONE ,exp, ID1left))
        | VAR ID COLON ID ASSIGN exp (makeVarDec( S.symbol ID1, SOME (S.symbol ID2,ID2left), exp, ID1left))

    (* [..missing rules for exp..] *)

(* [..missing rules for missing nonterminals..] *)
