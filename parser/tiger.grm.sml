functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn
structure S = Symbol

(* [these functions and similar ones may be convenient
 * for the creation of abstract syntax trees] *)

datatype lvalueSpec = Field of S.symbol
		| Subscript of A.exp

fun makeInt(e)=A.IntExp e

fun makeCallExp( f , arglist, p) =
 A.CallExp { func = S.symbol f,
	      args = arglist,
	      pos = p}

(* Construct the lvalue one list element at the time*)
fun makeLvalue (v, p, (value,pos)::l) = (case value of
					   Field(s) => makeLvalue(A.FieldVar(v, s , pos), pos, l)
						  | Subscript(exp) => makeLvalue(A.SubscriptVar(v,exp,pos), pos, l)
)
				       |  makeLvalue (v,_,[]) = v

(* check if we have var expression, extract the
underlying variable *)
fun getLvalue ( var : A.exp) : A.var =
  (case var of A.VarExp(v) => v
	    | _  => A.SimpleVar(S.symbol "bogusVar", 0))

fun makeBinop (e1, bop, e2, p) =
    A.OpExp  { left = e1
             , oper = bop
             , right = e2
             , pos = p}

fun makeIf (et, en, el, p) =
    A.IfExp  { test = et
             , thn = en
             , els = el
             , pos = p}

fun makeVarDec (idsym, ty, e, p) =
    A.VarDec { name = idsym
             , escape = ref true
             , typ = ty
             , init = e
             , pos = p}

fun makeAssign (v, e, p) =
  A.AssignExp { var = v
	      , exp = e
	      , pos = p }

fun makeWhile (t, e, p) =
  A.WhileExp { test = t
	   , body = e
	   , pos = p }

fun makeFor (i, low, high, e, p) =
  let val s = (S.symbol i) in
  A.ForExp { var = s
	   , escape = ref true
	   , lo = low
	   , hi = high
	   , body = e
	   , pos = p }
  end

fun makeFundecl (idsym, ps, rty, e, p) =
             { name = idsym
             , params = ps
             , result = rty
             , body = e
             , pos = p} : A.fundecldata


fun makeArrCreate (ty, s, i, p) =
  A.ArrayExp{typ = S.symbol ty
            , size = s
            , init = i
            , pos = p }

fun makeRecCreate(i, fi, p) =
  A.RecordExp{fields = fi
            , typ = S.symbol i
            , pos = p }


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\178\000\002\000\178\000\005\000\178\000\007\000\178\000\
\\009\000\178\000\011\000\178\000\013\000\178\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\178\000\027\000\178\000\031\000\178\000\032\000\178\000\
\\035\000\178\000\036\000\178\000\038\000\178\000\039\000\178\000\
\\045\000\178\000\000\000\
\\001\000\001\000\179\000\002\000\179\000\005\000\179\000\007\000\179\000\
\\009\000\179\000\011\000\179\000\013\000\179\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\179\000\027\000\179\000\031\000\179\000\032\000\179\000\
\\035\000\179\000\036\000\179\000\038\000\179\000\039\000\179\000\
\\045\000\179\000\000\000\
\\001\000\001\000\180\000\002\000\180\000\005\000\180\000\007\000\180\000\
\\009\000\180\000\011\000\180\000\013\000\180\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\180\000\027\000\180\000\031\000\180\000\032\000\180\000\
\\035\000\180\000\036\000\180\000\038\000\180\000\039\000\180\000\
\\045\000\180\000\000\000\
\\001\000\001\000\181\000\002\000\181\000\005\000\181\000\007\000\181\000\
\\009\000\181\000\011\000\181\000\013\000\181\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\181\000\027\000\181\000\031\000\181\000\032\000\181\000\
\\035\000\181\000\036\000\181\000\038\000\181\000\039\000\181\000\
\\045\000\181\000\000\000\
\\001\000\001\000\182\000\002\000\182\000\005\000\182\000\007\000\182\000\
\\009\000\182\000\011\000\182\000\013\000\182\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\182\000\027\000\182\000\031\000\182\000\032\000\182\000\
\\035\000\182\000\036\000\182\000\038\000\182\000\039\000\182\000\
\\045\000\182\000\000\000\
\\001\000\001\000\183\000\002\000\183\000\005\000\183\000\007\000\183\000\
\\009\000\183\000\011\000\183\000\013\000\183\000\015\000\041\000\
\\016\000\040\000\017\000\039\000\018\000\038\000\025\000\031\000\
\\026\000\183\000\027\000\183\000\031\000\183\000\032\000\183\000\
\\035\000\183\000\036\000\183\000\038\000\183\000\039\000\183\000\
\\045\000\183\000\000\000\
\\001\000\002\000\027\000\003\000\026\000\004\000\025\000\008\000\024\000\
\\016\000\023\000\030\000\022\000\033\000\021\000\034\000\020\000\
\\037\000\019\000\041\000\018\000\042\000\017\000\000\000\
\\001\000\002\000\048\000\045\000\047\000\000\000\
\\001\000\002\000\049\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\002\000\090\000\000\000\
\\001\000\002\000\094\000\000\000\
\\001\000\002\000\094\000\013\000\093\000\000\000\
\\001\000\002\000\104\000\000\000\
\\001\000\002\000\122\000\012\000\121\000\029\000\120\000\000\000\
\\001\000\002\000\139\000\000\000\
\\001\000\002\000\144\000\000\000\
\\001\000\002\000\147\000\000\000\
\\001\000\006\000\081\000\008\000\080\000\028\000\079\000\000\000\
\\001\000\006\000\125\000\000\000\
\\001\000\006\000\137\000\019\000\136\000\000\000\
\\001\000\009\000\085\000\000\000\
\\001\000\009\000\114\000\000\000\
\\001\000\009\000\123\000\000\000\
\\001\000\011\000\113\000\015\000\041\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\020\000\036\000\021\000\035\000\
\\022\000\034\000\023\000\033\000\024\000\032\000\025\000\031\000\
\\026\000\030\000\027\000\029\000\000\000\
\\001\000\011\000\129\000\015\000\041\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\020\000\036\000\021\000\035\000\
\\022\000\034\000\023\000\033\000\024\000\032\000\025\000\031\000\
\\026\000\030\000\027\000\029\000\000\000\
\\001\000\013\000\111\000\000\000\
\\001\000\013\000\145\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\031\000\084\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\035\000\127\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\036\000\083\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\036\000\148\000\000\000\
\\001\000\019\000\099\000\000\000\
\\001\000\019\000\112\000\000\000\
\\001\000\019\000\149\000\000\000\
\\001\000\028\000\082\000\000\000\
\\001\000\028\000\126\000\000\000\
\\001\000\038\000\076\000\000\000\
\\001\000\039\000\116\000\000\000\
\\001\000\040\000\134\000\000\000\
\\153\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\154\000\000\000\
\\155\000\000\000\
\\156\000\000\000\
\\157\000\000\000\
\\158\000\000\000\
\\159\000\000\000\
\\160\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\028\000\028\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\017\000\039\000\018\000\038\000\025\000\031\000\000\000\
\\172\000\017\000\039\000\018\000\038\000\025\000\031\000\000\000\
\\173\000\025\000\031\000\000\000\
\\174\000\025\000\031\000\000\000\
\\175\000\025\000\031\000\000\000\
\\176\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\000\000\
\\177\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\000\000\
\\184\000\017\000\039\000\018\000\038\000\025\000\031\000\000\000\
\\185\000\000\000\
\\186\000\007\000\086\000\015\000\041\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\020\000\036\000\021\000\035\000\
\\022\000\034\000\023\000\033\000\024\000\032\000\025\000\031\000\
\\026\000\030\000\027\000\029\000\000\000\
\\187\000\000\000\
\\188\000\002\000\027\000\003\000\026\000\004\000\025\000\008\000\024\000\
\\016\000\023\000\030\000\022\000\033\000\021\000\034\000\020\000\
\\037\000\019\000\041\000\018\000\042\000\017\000\000\000\
\\189\000\000\000\
\\190\000\005\000\115\000\015\000\041\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\020\000\036\000\021\000\035\000\
\\022\000\034\000\023\000\033\000\024\000\032\000\025\000\031\000\
\\026\000\030\000\027\000\029\000\000\000\
\\191\000\000\000\
\\192\000\002\000\027\000\003\000\026\000\004\000\025\000\008\000\024\000\
\\016\000\023\000\030\000\022\000\033\000\021\000\034\000\020\000\
\\037\000\019\000\041\000\018\000\042\000\017\000\000\000\
\\193\000\000\000\
\\194\000\000\000\
\\195\000\000\000\
\\196\000\000\000\
\\197\000\000\000\
\\198\000\000\000\
\\199\000\000\000\
\\200\000\000\000\
\\201\000\000\000\
\\202\000\000\000\
\\203\000\000\000\
\\204\000\005\000\124\000\000\000\
\\205\000\000\000\
\\206\000\002\000\103\000\000\000\
\\207\000\000\000\
\\208\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\209\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\210\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\211\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\008\000\061\000\010\000\060\000\012\000\059\000\014\000\058\000\000\000\
\\215\000\010\000\088\000\014\000\058\000\000\000\
\\216\000\000\000\
\\216\000\040\000\132\000\000\000\
\\217\000\000\000\
\\218\000\000\000\
\\219\000\000\000\
\\220\000\000\000\
\\221\000\005\000\110\000\000\000\
\\222\000\000\000\
\\223\000\015\000\041\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\224\000\000\000\
\\225\000\002\000\048\000\045\000\047\000\000\000\
\\226\000\000\000\
\\227\000\000\000\
\\228\000\000\000\
\\229\000\000\000\
\"
val actionRowNumbers =
"\007\000\052\000\053\000\055\000\
\\054\000\047\000\048\000\058\000\
\\046\000\050\000\057\000\056\000\
\\049\000\051\000\041\000\044\000\
\\045\000\008\000\009\000\007\000\
\\007\000\007\000\070\000\043\000\
\\042\000\097\000\007\000\007\000\
\\007\000\007\000\007\000\007\000\
\\007\000\007\000\007\000\007\000\
\\007\000\007\000\007\000\007\000\
\\038\000\113\000\112\000\111\000\
\\109\000\010\000\019\000\036\000\
\\031\000\029\000\066\000\022\000\
\\068\000\094\000\098\000\098\000\
\\011\000\013\000\007\000\074\000\
\\075\000\065\000\064\000\063\000\
\\006\000\005\000\004\000\003\000\
\\002\000\001\000\062\000\061\000\
\\060\000\059\000\070\000\110\000\
\\033\000\007\000\088\000\014\000\
\\007\000\007\000\007\000\067\000\
\\070\000\096\000\007\000\095\000\
\\101\000\105\000\027\000\104\000\
\\034\000\025\000\023\000\072\000\
\\039\000\015\000\092\000\024\000\
\\086\000\020\000\037\000\030\000\
\\077\000\078\000\069\000\026\000\
\\012\000\103\000\007\000\100\000\
\\071\000\074\000\108\000\083\000\
\\082\000\080\000\040\000\088\000\
\\081\000\021\000\088\000\016\000\
\\007\000\007\000\007\000\099\000\
\\106\000\107\000\007\000\073\000\
\\017\000\028\000\007\000\018\000\
\\087\000\089\000\093\000\032\000\
\\079\000\102\000\084\000\085\000\
\\090\000\035\000\007\000\007\000\
\\076\000\091\000\000\000"
val gotoT =
"\
\\001\000\150\000\002\000\014\000\014\000\013\000\018\000\012\000\
\\020\000\011\000\021\000\010\000\024\000\009\000\025\000\008\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\044\000\004\000\043\000\005\000\042\000\006\000\041\000\
\\028\000\040\000\000\000\
\\000\000\
\\002\000\048\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\049\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\050\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\052\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\026\000\051\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\015\000\055\000\016\000\054\000\017\000\053\000\000\000\
\\002\000\060\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\061\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\062\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\063\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\064\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\065\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\066\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\067\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\068\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\069\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\070\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\071\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\072\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\073\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\044\000\004\000\043\000\005\000\042\000\006\000\041\000\
\\028\000\075\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\055\000\016\000\054\000\017\000\085\000\000\000\
\\015\000\055\000\016\000\054\000\017\000\087\000\000\000\
\\000\000\
\\022\000\090\000\023\000\089\000\000\000\
\\002\000\093\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\095\000\014\000\013\000\018\000\012\000\019\000\094\000\
\\020\000\011\000\021\000\010\000\024\000\009\000\025\000\008\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\052\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\026\000\096\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\098\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\007\000\100\000\008\000\099\000\000\000\
\\000\000\
\\002\000\103\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\104\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\105\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\002\000\052\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\026\000\106\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\002\000\107\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\117\000\012\000\116\000\013\000\115\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\022\000\128\000\023\000\089\000\000\000\
\\000\000\
\\002\000\129\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\095\000\014\000\013\000\018\000\012\000\019\000\131\000\
\\020\000\011\000\021\000\010\000\024\000\009\000\025\000\008\000\
\\027\000\007\000\029\000\006\000\030\000\005\000\031\000\004\000\
\\032\000\003\000\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\100\000\008\000\133\000\000\000\
\\000\000\
\\000\000\
\\007\000\100\000\008\000\136\000\000\000\
\\000\000\
\\002\000\138\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\139\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\140\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\141\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\144\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\148\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\002\000\149\000\014\000\013\000\018\000\012\000\020\000\011\000\
\\021\000\010\000\024\000\009\000\025\000\008\000\027\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\034\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 151
val numrules = 77
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | forexp of unit ->  (A.exp)
 | whileexp of unit ->  (A.exp) | ifelseexp of unit ->  (A.exp)
 | ifexp of unit ->  (A.exp) | unaryop of unit ->  (A.exp)
 | binop of unit ->  (A.exp) | deccon of unit ->  (A.exp)
 | letexp of unit ->  (A.exp)
 | seqsexps of unit ->  ( ( A.exp * int )  list)
 | seqexp of unit ->  (A.exp) | assignment of unit ->  (A.exp)
 | fieldcreate of unit ->  ( ( S.symbol * A.exp * pos ) )
 | reccreatecon of unit ->  ( ( S.symbol * A.exp * pos )  list)
 | reccreate of unit ->  (A.exp) | arrcreate of unit ->  (A.exp)
 | callexpcon of unit ->  ( ( A.exp * A.pos )  list)
 | callexp of unit ->  (A.exp)
 | ltail of unit ->  ( ( lvalueSpec * int )  list)
 | fieldexp of unit ->  ( ( lvalueSpec * int ) )
 | subscript of unit ->  ( ( lvalueSpec * int ) )
 | lvalue of unit ->  (A.exp) | recty of unit ->  (A.exp)
 | arrty of unit ->  (A.exp) | tyfields of unit ->  (A.exp)
 | typeid of unit ->  (A.exp) | ty of unit ->  (A.exp)
 | fielddeccontent of unit ->  (A.exp) | fielddec of unit ->  (A.exp)
 | fundec of unit ->  (A.exp) | vardec of unit ->  (A.exp)
 | tydec of unit ->  (A.exp) | dec of unit ->  (A.exp)
 | exp of unit ->  (A.exp) | program of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 31))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "CARET"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38)
 $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31)
 $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24)
 $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in ( A.IntExp INT)
end)
 in ( LrTable.NT 1, ( result, INT1left, INT1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
STRING as STRING1) = STRING1 ()
 in ( A.StringExp(STRING , STRING1left) )
end)
 in ( LrTable.NT 1, ( result, STRING1left, STRING1right), rest671)
end
|  ( 3, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => ( A.NilExp ))
 in ( LrTable.NT 1, ( result, NIL1left, NIL1right), rest671)
end
|  ( 4, ( ( _, ( _, BREAK1left, BREAK1right)) :: rest671)) => let val 
 result = MlyValue.exp (fn _ => (A.BreakExp BREAK1left))
 in ( LrTable.NT 1, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.seqexp seqexp1, seqexp1left, seqexp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
seqexp as seqexp1) = seqexp1 ()
 in ( seqexp )
end)
 in ( LrTable.NT 1, ( result, seqexp1left, seqexp1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.unaryop unaryop1, unaryop1left, 
unaryop1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (unaryop as unaryop1) = unaryop1 ()
 in (unaryop)
end)
 in ( LrTable.NT 1, ( result, unaryop1left, unaryop1right), rest671)

end
|  ( 7, ( ( _, ( MlyValue.binop binop1, binop1left, binop1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (binop
 as binop1) = binop1 ()
 in (binop)
end)
 in ( LrTable.NT 1, ( result, binop1left, binop1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.callexp callexp1, callexp1left, 
callexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (callexp as callexp1) = callexp1 ()
 in (callexp)
end)
 in ( LrTable.NT 1, ( result, callexp1left, callexp1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.assignment assignment1, assignment1left, 
assignment1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assignment as assignment1) = assignment1 ()
 in ( assignment )
end)
 in ( LrTable.NT 1, ( result, assignment1left, assignment1right), 
rest671)
end
|  ( 10, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (lvalue)
end)
 in ( LrTable.NT 1, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.forexp forexp1, forexp1left, forexp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
forexp as forexp1) = forexp1 ()
 in ( forexp )
end)
 in ( LrTable.NT 1, ( result, forexp1left, forexp1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.whileexp whileexp1, whileexp1left, 
whileexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (whileexp as whileexp1) = whileexp1 ()
 in ( whileexp )
end)
 in ( LrTable.NT 1, ( result, whileexp1left, whileexp1right), rest671)

end
|  ( 13, ( ( _, ( MlyValue.ifexp ifexp1, ifexp1left, ifexp1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (ifexp
 as ifexp1) = ifexp1 ()
 in ( ifexp )
end)
 in ( LrTable.NT 1, ( result, ifexp1left, ifexp1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.ifelseexp ifelseexp1, ifelseexp1left, 
ifelseexp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (ifelseexp as ifelseexp1) = ifelseexp1 ()
 in ( ifelseexp )
end)
 in ( LrTable.NT 1, ( result, ifelseexp1left, ifelseexp1right), 
rest671)
end
|  ( 15, ( ( _, ( MlyValue.arrcreate arrcreate1, arrcreate1left, 
arrcreate1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (arrcreate as arrcreate1) = arrcreate1 ()
 in ( arrcreate )
end)
 in ( LrTable.NT 1, ( result, arrcreate1left, arrcreate1right), 
rest671)
end
|  ( 16, ( ( _, ( MlyValue.reccreate reccreate1, reccreate1left, 
reccreate1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (reccreate as reccreate1) = reccreate1 ()
 in ( reccreate )
end)
 in ( LrTable.NT 1, ( result, reccreate1left, reccreate1right), 
rest671)
end
|  ( 17, ( ( _, ( MlyValue.letexp letexp1, letexp1left, letexp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  
letexp1 = letexp1 ()
 in ( A.IntExp(0) )
end)
 in ( LrTable.NT 1, ( result, letexp1left, letexp1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
PLUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop (exp1,A.PlusOp,exp2, PLUSleft ))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
MINUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop (exp1,A.MinusOp,exp2, MINUSleft ))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
TIMESleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop( exp1, A.TimesOp, exp2, TIMESleft ))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
DIVIDEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)
) => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1, A.DivideOp, exp2, DIVIDEleft ))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
CARETleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop( exp1, A.ExponentOp, exp2, CARETleft ))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ANDleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeIf(exp1,exp2,SOME (A.IntExp(0)), ANDleft))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ORleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeIf (exp1, A.IntExp(1), SOME exp2, ORleft))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
EQleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeBinop(exp1,A.EqOp,exp2,EQleft))
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
NEQleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1,A.NeqOp,exp2,NEQleft) )
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
LTleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1,A.LtOp,exp2,LTleft) )
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
LEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1,A.LeOp,exp2,LEleft) )
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
GTleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1,A.GtOp,exp2,GTleft) )
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
GEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.binop (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeBinop(exp1,A.GeOp,exp2,GEleft) )
end)
 in ( LrTable.NT 28, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.unaryop (fn _ => let val  (exp as exp1) = exp1 ()
 in (makeBinop(A.IntExp(0), A.MinusOp, exp, MINUSleft))
end)
 in ( LrTable.NT 29, ( result, MINUS1left, exp1right), rest671)
end
|  ( 32, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.seqsexps 
seqsexps1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.seqexp (fn _ => let val  (seqsexps as 
seqsexps1) = seqsexps1 ()
 in ( A.SeqExp(seqsexps) )
end)
 in ( LrTable.NT 24, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 33, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.seqsexps (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ( [(exp, expleft)] )
end)
 in ( LrTable.NT 25, ( result, exp1left, exp1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.seqsexps seqsexps1, _, seqsexps1right)) ::
 _ :: ( _, ( MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)
) => let val  result = MlyValue.seqsexps (fn _ => let val  (exp as 
exp1) = exp1 ()
 val  (seqsexps as seqsexps1) = seqsexps1 ()
 in ( (exp,expleft)::seqsexps )
end)
 in ( LrTable.NT 25, ( result, exp1left, seqsexps1right), rest671)
end
|  ( 35, ( rest671)) => let val  result = MlyValue.seqsexps (fn _ => (
[]))
 in ( LrTable.NT 25, ( result, defaultPos, defaultPos), rest671)
end
|  ( 36, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.callexpcon 
callexpcon1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left
), _)) :: rest671)) => let val  result = MlyValue.callexp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  (callexpcon as callexpcon1) = callexpcon1 ()
 in (makeCallExp(ID,callexpcon,IDleft))
end)
 in ( LrTable.NT 17, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.callexpcon (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ([(exp,expleft)])
end)
 in ( LrTable.NT 18, ( result, exp1left, exp1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.callexpcon callexpcon1, _, callexpcon1right
)) :: _ :: ( _, ( MlyValue.exp exp1, (expleft as exp1left), _)) :: 
rest671)) => let val  result = MlyValue.callexpcon (fn _ => let val  (
exp as exp1) = exp1 ()
 val  (callexpcon as callexpcon1) = callexpcon1 ()
 in ((exp,expleft)::callexpcon)
end)
 in ( LrTable.NT 18, ( result, exp1left, callexpcon1right), rest671)

end
|  ( 39, ( rest671)) => let val  result = MlyValue.callexpcon (fn _ =>
 ([]))
 in ( LrTable.NT 18, ( result, defaultPos, defaultPos), rest671)
end
|  ( 40, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
ASSIGNleft, _)) :: ( _, ( MlyValue.lvalue lvalue1, lvalue1left, _)) ::
 rest671)) => let val  result = MlyValue.assignment (fn _ => let val 
 (lvalue as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in ( makeAssign( getLvalue(lvalue) , exp, ASSIGNleft) )
end)
 in ( LrTable.NT 23, ( result, lvalue1left, exp1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.forexp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (makeFor(ID, exp1, exp2, exp3, FORleft))
end)
 in ( LrTable.NT 33, ( result, FOR1left, exp3right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.whileexp (fn _ => let val 
 exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( makeWhile( exp1, exp2, WHILEleft) )
end)
 in ( LrTable.NT 32, ( result, WHILE1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.ifexp (fn _ => let val  exp1 =
 exp1 ()
 val  exp2 = exp2 ()
 in ( makeIf(exp1, exp2, (NONE), IFleft) )
end)
 in ( LrTable.NT 30, ( result, IF1left, exp2right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.ifelseexp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ( makeIf(exp1, exp2, (SOME exp3), IFleft)  )
end)
 in ( LrTable.NT 31, ( result, IF1left, exp3right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.tydec (fn _ => let val  ID1 = ID1 ()
 val  ty1 = ty1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 3, ( result, TYPE1left, ty1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ty (fn _ => let val  ID1 = ID1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 8, ( result, ID1left, ID1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.arrty arrty1, arrty1left, arrty1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  arrty1 = 
arrty1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 8, ( result, arrty1left, arrty1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.recty recty1, recty1left, recty1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  recty1 = 
recty1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 8, ( result, recty1left, recty1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, 
ARRAY1left, _)) :: rest671)) => let val  result = MlyValue.arrty (fn _
 => let val  ID1 = ID1 ()
 in (A.IntExp(1))
end)
 in ( LrTable.NT 11, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 50, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( 
MlyValue.fielddeccontent fielddeccontent1, _, _)) :: ( _, ( _, 
LBRACE1left, _)) :: rest671)) => let val  result = MlyValue.recty (fn
 _ => let val  fielddeccontent1 = fielddeccontent1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 12, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 51, ( ( _, ( MlyValue.fielddec fielddec1, fielddec1left, 
fielddec1right)) :: rest671)) => let val  result = 
MlyValue.fielddeccontent (fn _ => let val  fielddec1 = fielddec1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 7, ( result, fielddec1left, fielddec1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.fielddeccontent fielddeccontent1, _, 
fielddeccontent1right)) :: _ :: ( _, ( MlyValue.fielddec fielddec1, 
fielddec1left, _)) :: rest671)) => let val  result = 
MlyValue.fielddeccontent (fn _ => let val  fielddec1 = fielddec1 ()
 val  fielddeccontent1 = fielddeccontent1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 7, ( result, fielddec1left, fielddeccontent1right), 
rest671)
end
|  ( 53, ( rest671)) => let val  result = MlyValue.fielddeccontent (fn
 _ => (A.IntExp(0)))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 54, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.fielddec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 6, ( result, ID1left, ID2right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.fielddeccontent fielddeccontent1, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.fundec (fn _ => let val  ID1 = ID1 ()
 val  fielddeccontent1 = fielddeccontent1 ()
 val  exp1 = exp1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 5, ( result, ID1left, exp1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: _ :: _ :: ( _, ( MlyValue.fielddeccontent 
fielddeccontent1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _))
 :: rest671)) => let val  result = MlyValue.fundec (fn _ => let val  
ID1 = ID1 ()
 val  fielddeccontent1 = fielddeccontent1 ()
 val  ID2 = ID2 ()
 val  exp1 = exp1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 5, ( result, ID1left, exp1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 4, ( result, ID1left, exp1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _))
 :: rest671)) => let val  result = MlyValue.vardec (fn _ => let val  
ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  exp1 = exp1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 4, ( result, ID1left, exp1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.ltail ltail1, _, ltail1right)) :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.lvalue (fn _ => let val  (ID as ID1) = ID1 ()
 val  (ltail as ltail1) = ltail1 ()
 in (
 A.VarExp( makeLvalue(
			A.SimpleVar(S.symbol ID, IDleft), IDleft, ltail))
		  
)
end)
 in ( LrTable.NT 13, ( result, ID1left, ltail1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.ltail ltail1, _, ltail1right)) :: ( _, ( 
MlyValue.subscript subscript1, subscript1left, _)) :: rest671)) => let
 val  result = MlyValue.ltail (fn _ => let val  (subscript as 
subscript1) = subscript1 ()
 val  (ltail as ltail1) = ltail1 ()
 in (subscript::ltail)
end)
 in ( LrTable.NT 16, ( result, subscript1left, ltail1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.ltail ltail1, _, ltail1right)) :: ( _, ( 
MlyValue.fieldexp fieldexp1, fieldexp1left, _)) :: rest671)) => let
 val  result = MlyValue.ltail (fn _ => let val  (fieldexp as fieldexp1
) = fieldexp1 ()
 val  (ltail as ltail1) = ltail1 ()
 in (fieldexp::ltail)
end)
 in ( LrTable.NT 16, ( result, fieldexp1left, ltail1right), rest671)

end
|  ( 62, ( rest671)) => let val  result = MlyValue.ltail (fn _ => ([])
)
 in ( LrTable.NT 16, ( result, defaultPos, defaultPos), rest671)
end
|  ( 63, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: ( _, ( _, (LBRACKleft as LBRACK1left), _)) :: rest671)) => let
 val  result = MlyValue.subscript (fn _ => let val  (exp as exp1) = 
exp1 ()
 in ((Subscript(exp), LBRACKleft))
end)
 in ( LrTable.NT 14, ( result, LBRACK1left, RBRACK1right), rest671)

end
|  ( 64, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, (DOTleft
 as DOT1left), _)) :: rest671)) => let val  result = MlyValue.fieldexp
 (fn _ => let val  (ID as ID1) = ID1 ()
 in ((Field(S.symbol ID), DOTleft))
end)
 in ( LrTable.NT 15, ( result, DOT1left, ID1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.arrcreate
 (fn _ => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (makeArrCreate(ID,exp1,exp2,IDleft))
end)
 in ( LrTable.NT 19, ( result, ID1left, exp2right), rest671)
end
|  ( 66, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.reccreatecon
 reccreatecon1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.reccreate (fn
 _ => let val  (ID as ID1) = ID1 ()
 val  (reccreatecon as reccreatecon1) = reccreatecon1 ()
 in (makeRecCreate(ID,reccreatecon,IDleft))
end)
 in ( LrTable.NT 20, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 67, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.reccreate (fn _ => let val  (ID as ID1) = ID1 ()
 in (makeRecCreate(ID,[],IDleft))
end)
 in ( LrTable.NT 20, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.fieldcreate fieldcreate1, fieldcreate1left,
 fieldcreate1right)) :: rest671)) => let val  result = 
MlyValue.reccreatecon (fn _ => let val  (fieldcreate as fieldcreate1)
 = fieldcreate1 ()
 in ([fieldcreate])
end)
 in ( LrTable.NT 21, ( result, fieldcreate1left, fieldcreate1right), 
rest671)
end
|  ( 69, ( ( _, ( MlyValue.reccreatecon reccreatecon1, _, 
reccreatecon1right)) :: _ :: ( _, ( MlyValue.fieldcreate fieldcreate1,
 fieldcreate1left, _)) :: rest671)) => let val  result = 
MlyValue.reccreatecon (fn _ => let val  (fieldcreate as fieldcreate1)
 = fieldcreate1 ()
 val  (reccreatecon as reccreatecon1) = reccreatecon1 ()
 in (fieldcreate:: reccreatecon)
end)
 in ( LrTable.NT 21, ( result, fieldcreate1left, reccreatecon1right), 
rest671)
end
|  ( 70, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.fieldcreate (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ((S.symbol ID,exp,IDleft))
end)
 in ( LrTable.NT 22, ( result, ID1left, exp1right), rest671)
end
|  ( 71, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.seqsexps 
seqsexps1, _, _)) :: _ :: ( _, ( MlyValue.deccon deccon1, _, _)) :: (
 _, ( _, LET1left, _)) :: rest671)) => let val  result = 
MlyValue.letexp (fn _ => let val  deccon1 = deccon1 ()
 val  seqsexps1 = seqsexps1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 26, ( result, LET1left, END1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.dec dec1, dec1left, dec1right)) :: rest671)
) => let val  result = MlyValue.deccon (fn _ => let val  dec1 = dec1
 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 27, ( result, dec1left, dec1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.deccon deccon1, _, deccon1right)) :: ( _, (
 MlyValue.dec dec1, dec1left, _)) :: rest671)) => let val  result = 
MlyValue.deccon (fn _ => let val  dec1 = dec1 ()
 val  deccon1 = deccon1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 27, ( result, dec1left, deccon1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.tydec tydec1, tydec1left, tydec1right)) :: 
rest671)) => let val  result = MlyValue.dec (fn _ => let val  tydec1 =
 tydec1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 2, ( result, tydec1left, tydec1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.vardec vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  
vardec1 = vardec1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 2, ( result, vardec1left, vardec1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.fundec fundec1, fundec1left, fundec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  
fundec1 = fundec1 ()
 in (A.IntExp(0))
end)
 in ( LrTable.NT 2, ( result, fundec1left, fundec1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun CARET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
